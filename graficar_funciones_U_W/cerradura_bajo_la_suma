import numpy as np
import matplotlib.pyplot as plt

# Parámetros
t = np.linspace(0, 2*np.pi, 100)
A_i = 1  # Asumimos A_i = 1 para simplificar

# Definir las funciones base
U = A_i * (np.cos(t) + np.sin(t))
W = A_i * (np.cos(t) - np.sin(t))

# Crear figura con subplots
fig, axes = plt.subplots(2, 2, figsize=(12, 10))

# Gráfica 1: U y W por separado
axes[0,0].plot(t, U, 'r-', label='U = cos(t) + sin(t)', linewidth=2)
axes[0,0].plot(t, W, 'b-', label='W = cos(t) - sin(t)', linewidth=2)
axes[0,0].set_title('Funciones U y W')
axes[0,0].set_xlabel('t')
axes[0,0].set_ylabel('Valor')
axes[0,0].legend()
axes[0,0].grid(True, alpha=0.3)

# Gráfica 2: Suma U + W (debería dar 2cos(t))
suma_UW = U + W
axes[0,1].plot(t, suma_UW, 'g-', label='U + W = 2cos(t)', linewidth=2)
axes[0,1].plot(t, 2*np.cos(t), 'k--', label='2cos(t) (verificación)', linewidth=1, alpha=0.5)
axes[0,1].set_title('Suma U + W (Cerradura bajo la suma)')
axes[0,1].set_xlabel('t')
axes[0,1].set_ylabel('Valor')
axes[0,1].legend()
axes[0,1].grid(True, alpha=0.3)

# Gráfica 3: Vectores en diferentes puntos t
t_points = [0, np.pi/4, np.pi/2, 3*np.pi/4]  # Algunos puntos de t

for t_val in t_points:
    # Valores de U y W en ese punto t
    u_val = np.cos(t_val) + np.sin(t_val)
    w_val = np.cos(t_val) - np.sin(t_val)
    
    axes[1,0].scatter(u_val, w_val, s=100, label=f't={t_val:.2f}')
    axes[1,0].arrow(0, 0, u_val, w_val, head_width=0.1, head_length=0.1, 
                   fc='red', ec='red', alpha=0.7)

axes[1,0].set_xlabel('Componente U')
axes[1,0].set_ylabel('Componente W')
axes[1,0].set_title('Vectores U y W en diferentes tiempos')
axes[1,0].legend()
axes[1,0].grid(True, alpha=0.3)
axes[1,0].axhline(y=0, color='k', linestyle='-', alpha=0.3)
axes[1,0].axvline(x=0, color='k', linestyle='-', alpha=0.3)
axes[1,0].set_xlim(-2, 2)
axes[1,0].set_ylim(-2, 2)

# Gráfica 4: Combinaciones lineales (Espacio Vectorial V)
t_dense = np.linspace(0, 2*np.pi, 50)
U_dense = np.cos(t_dense) + np.sin(t_dense)
W_dense = np.cos(t_dense) - np.sin(t_dense)

axes[1,1].plot(t_dense, U_dense, 'r-', label='U(t)', linewidth=2)
axes[1,1].plot(t_dense, W_dense, 'b-', label='W(t)', linewidth=2)

# Dibujar combinaciones lineales específicas
coeficientes = [
    (1, 1),    # U + W
    (1, -1),   # U - W
    (2, 0),    # 2U
    (0, 2),    # 2W
    (1.5, 0.5),# 1.5U + 0.5W
    (-1, 1)    # -U + W
]

colors = ['green', 'purple', 'orange', 'brown', 'pink', 'gray']
linestyles = ['-', '--', '-.', ':', '-', '--']

for i, (a, b) in enumerate(coeficientes):
    comb = a * U_dense + b * W_dense
    axes[1,1].plot(t_dense, comb, color=colors[i], linestyle=linestyles[i], 
                   alpha=0.7, linewidth=1.5, label=f'{a}U + {b}W')

axes[1,1].set_title('Espacio Vectorial V: Combinaciones lineales de U y W')
axes[1,1].set_xlabel('t')
axes[1,1].set_ylabel('f(t)')
axes[1,1].legend(fontsize=8)
axes[1,1].grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

